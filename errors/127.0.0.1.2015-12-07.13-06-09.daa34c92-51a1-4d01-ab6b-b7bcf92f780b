(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'tip_list' is not defined"
p3
sS'layer'
p4
S'C:\\Users\\Josh Shih\\Desktop\\cmps183\\applications\\loveslug\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom random import randint\ndateTips =  [   "You miss 100% of the shots you don\'t take. -Wayne Gretzky",\n                "Shit happens. -Life",\n                "A fluke is one of the most common fish in the sea, so if you go fishing for a fluke, chances are you just might catch one. -Kevin Malone",\n            ]\n\nprofTips =  [   "You miss 100% of the shots you don\'t take. -Wayne Gretzky",\n                "Shit happens. -Life",\n                "A fluke is one of the most common fish in the sea, so if you go fishing for a fluke, chances are you just might catch one. -Kevin Malone",\n            ]\n\ndef index():\n    #display\n    profile = db().select(db.person.user_id, db.person.image)\n    return dict(form = auth(), profile=profile, tip=selRandTip(tip_list))\n\ndef matches():\n\n    return dict()\n\ndef messages():\n    \'\'\'This will return all emails that the user has sent or received -cole \'\'\'\n    recMessages = db(db.email.receiver==auth.user_id).select()\n    sentMessages = db(db.email.sender==auth.user_id).select()\n    return dict(recMessages=messages, sentMessages = sentMessages, tip=selRandTip(tip_list))\n\ndef chat():\n    \'\'\'This will return all chats that the user has sent or received -cole \'\'\'\n    recChats = db(db.chat.receiver==auth.user_id).select()\n    sentChats = db(db.chat.sender==auth.user_id).select()\n    return dict(sentChats=sentChats, recChats=recChats)\n\ndef settings():\n    return dict()\n\ndef myprofile():\n    thisprofile = db(db.person).select()\n    if thisprofile is None:\n        session.flash = T(\'You have to update your profile first!\')\n        redirect(URL(\'default\'))\n    return dict(thisprofile=thisprofile, tip=selRandTip(tip_list))\n\ndef profile():\n    profile = db.person\n    return dict(profile=profile, tip=selRandTip(tip_list))\n\n\ndef editprofile():\n    profile = db(db.person.user_id == auth.user).select().first()\n    print profile\n    form = SQLFORM(db.person,\n                   fields=[\n                       \'image\',\n                       \'about_me\',\n                       \'interests\',\n                       \'major\',\n                       \'college\'\n                   ],\n                   record=profile)\n    form.vars.setdefault(\'user_id\', auth.user)\n    if form.process().accepted:\n        session.flash = T(\'Your profile has been updated\')\n        redirect(URL(\'default\', \'editprofile\'))\n    return dict(form=form, tip=selRandTip(tip_list))\n\n\ndef tips():\n    return dict(tip_list=tip_list)\n\n\ndef selRandTip(tip_list):\n    x = randint(0, len(tip_list)-1)\n    return tip_list[x]\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\ndef reset_db():\n    db.person.truncate()\n    db.chat.truncate()\n    db.email.truncate()\n    db.auth_user.truncate()\n    db.commit()\n    return "ok"\n\ndef drop_db():\n    db.person.drop()\n    db.chat.drop()\n    db.email.drop()\n    db.commit()\n    return "ok"\n\nresponse._vars=response._caller(tips)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\applications\\loveslug\\controllers/default.py", line 139, in <module>\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\applications\\loveslug\\controllers/default.py", line 77, in tips\n    return dict(tip_list=tip_list)\nNameError: global name \'tip_list\' is not defined\n'
p11
s.