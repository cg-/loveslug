(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/base.py", line 437, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/adapters/base.py", line 57, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 78, in __init__\n    if do_connect: self.reconnect()\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/connection.py", line 104, in reconnect\n    self.connection = f()\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 76, in connector\n    return self.driver.Connection(dbpath, **driver_args)\nOperationalError: unable to open database file\n'
p3
sS'layer'
p4
S'/Users/Anan/Downloads/web2py/applications/loveslug/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(myconf.take(\'db.uri\'), pool_size=myconf.take(\'db.pool_size\', cast=int), check_reserved=[\'all\'])\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore+ndb\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.take(\'forms.separator\')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n## (optional) static assets folder versioning\n# response.static_version = \'0.0.0\'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\nauth.settings.extra_fields[\'auth_user\']= [Field(\'birthday\', \'date\', requires=IS_DATE(format=T(\'%Y-%m-%d\'),\n                                                error_message=\'must be YYYY-MM-DD!\')),\n                                            Field(\'Gender\', requires=IS_IN_SET([\'Male\', \'Female\', \'Other\'])),\n                                            Field(\'Seeking_a\', requires=IS_IN_SET([\'Male\', \'Female\', \'Other\']))]\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.take(\'smtp.server\')\nmail.settings.sender = myconf.take(\'smtp.sender\')\nmail.settings.login = myconf.take(\'smtp.login\')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n######################\n# Logging\nimport logging, sys\nFORMAT = "%(asctime)s %(levelname)s %(process)s %(thread)s %(funcName)s():%(lineno)d %(message)s"\nlogging.basicConfig(stream=sys.stderr)\nlogger = logging.getLogger(request.application)\nlogger.setLevel(logging.INFO)\n\n# Let\'s log the request.\nlogger.info("====> Request: %r %r %r %r" % (request.env.request_method, request.env.path_info, request.args, request.vars))\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Anan/Downloads/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/Anan/Downloads/web2py/applications/loveslug/models/db.py", line 20, in <module>\n    db = DAL(myconf.take(\'db.uri\'), pool_size=myconf.take(\'db.pool_size\', cast=int), check_reserved=[\'all\'])\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/base.py", line 459, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/base.py", line 437, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/adapters/base.py", line 57, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 78, in __init__\n    if do_connect: self.reconnect()\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/connection.py", line 104, in reconnect\n    self.connection = f()\n  File "/Users/Anan/Downloads/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 76, in connector\n    return self.driver.Connection(dbpath, **driver_args)\nOperationalError: unable to open database file\n\n'
p11
s.