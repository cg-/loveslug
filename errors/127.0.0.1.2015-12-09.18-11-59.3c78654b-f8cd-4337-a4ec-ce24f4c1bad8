(dp1
S'output'
p2
S"<class 'sqlite3.OperationalError'> no such table: preferences"
p3
sS'layer'
p4
S'C:\\Users\\Josh Shih\\Desktop\\cmps183\\applications\\loveslug\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom random import randint\nimport datetime\n\ndateTips =  [   "You miss 100% of the shots you don\'t take... [Wayne Gretzky]",\n                "Shit happens... [Life]",\n                "A fluke is one of the most common fish in the sea, so if you go fishing for a fluke, chances are you just might catch one... [Kevin Malone]",\n                "To find a prince, you gotta kiss some toads... [Foxy Brown]",\n                "You must search well enough, to find the answers... [Lailah Gifty Akita]",\n                "To live, to TRULY live, we must be willing to RISK... [Mandy Hale]", \n                "It\'s hard to believe in coincidence, but it\'s even harder to believe in anything else... [John Green]",\n                "The doors will be opened to those who are bold enough to knock...",\n                "Life has no remote. Get up and change it yourself...",\n                "All glory comes from a daring to begin...",\n                "You are not born a winner; you are not born a loser. You are born a chooser...",\n                "Now is your chance to make a move!",\n            ]\n\nprofTips =  [   "People see your picture before hellos. Be sure to take a good picture!",\n                "Keep it simple and mysterious!",\n                "What most interests you? What are your hobbies?",\n                "Don\'t leave your profile empty!",\n            ]\n\ndef index():\n    #display\n    profile = db().select(db.person.user_id, db.person.image, db.person.your_name, db.person.college, db.person.birthday, db.person.seeking_a, db.person.gender)\n    myprofile = db(db.person.user_id == auth.user).select()\n    return dict(myprofile=myprofile, form=auth(), profile=profile)\n\ndef matches():\n    thisprofile = db(db.person.user_id == auth.user).select()\n    matches = db.select(db.person.seeking_a == this.profile.gender)\n    return dict(thisprofile=thisprofile, matches=matches)\n\ndef messages():\n    return dict()\n\ndef get_messages():\n    \'\'\'This will return all emails that the user has sent or received -cole \'\'\'\n    rec_rows = db(db.email.receiver==auth.user_id).select(orderby=db.email.sent)\n\n    d1 = {r.message_id: {\n        \'sender\':r.sender,\n        \'receiver\':r.receiver,\n        \'body\':r.body,\n        \'subject\':r.subject,\n        \'seen\':r.seen,\n        \'message_id\':r.message_id,\n        \'sent\':r.sent}\n          for r in rec_rows}\n\n    sent_rows = db(db.email.sender==auth.user_id).select(orderby=db.email.sent)\n\n    d2 = {r.message_id: {\n        \'sender\':r.sender,\n        \'receiver\':r.receiver,\n        \'body\':r.body,\n        \'subject\':r.subject,\n        \'seen\':r.seen,\n        \'message_id\':r.message_id,\n        \'sent\':r.sent }\n          for r in sent_rows}\n\n    return response.json(dict(rec_messages=d1, sent_messages=d2))\n\n\ndef send_message():\n    \'\'\'Sends a new message \'\'\'\n    db.email.update_or_insert((db.email.message_id == request.vars.message_id),\n            message_id=request.vars.message_id,\n            sender=auth.user_id,\n            receiver=request.vars.receiver,\n            body=request.vars.body,\n            subject=request.vars.subject,\n            seen=False,\n            sent=datetime.datetime.now())\n    return "ok"\n\ndef chat():\n    \'\'\'This will return all chats that the user has sent or received -cole \'\'\'\n    recChats = db(db.chat.receiver==auth.user_id).select()\n    sentChats = db(db.chat.sender==auth.user_id).select()\n    return dict(sentChats=sentChats, recChats=recChats)\n\ndef settings():\n    profile = db(db.preferences.user_id == auth.user).select().first()\n    print profile\n    form = SQLFORM(db.preferences,\n                   fields=[\n                       \'male\',\n                       \'female\',\n                   ],\n                   record=profile)\n    form.vars.setdefault(\'user_id\', auth.user)\n    if form.process().accepted:\n        session.flash = T(\'Your settings have been updated\')\n        redirect(URL(\'default\', \'settings\'))\n    return dict(form=form)\n\ndef myprofile():\n    thisprofile = db(db.person.user_id == auth.user).select()\n    if db.person.user_id.validate(auth.user)[1] != None:\n        session.flash = T(\'You have to update your profile first!\')\n        redirect(URL(\'editprofile\'))\n    return dict(thisprofile=thisprofile)\n\ndef profile():\n    profile_id = db.person(request.args(0))\n    thisprofile = db(db.person.user_id == profile_id).select()\n    return dict(thisprofile=thisprofile)\n\n\ndef editprofile():\n    profile = db(db.person.user_id == auth.user).select().first()\n    print profile\n    form = SQLFORM(db.person,\n                   fields=[\n                       \'image\',\n                       \'your_name\',\n                       \'birthday\',\n                       \'gender\',\n                       \'seeking_a\',\n                       \'about_me\',\n                       \'interests\',\n                       \'major\',\n                       \'college\'\n                   ],\n                   record=profile)\n    form.vars.setdefault(\'user_id\', auth.user)\n    if form.process().accepted:\n        session.flash = T(\'Your profile has been updated\')\n        redirect(URL(\'default\', \'editprofile\'))\n    return dict(form=form)\n\n#JOSH\'S TIP SECTION YAY.\ndef loadTips():\n    """\n    0 = profile tips\n    1 = dating tips\n    """\n    if request.args(0) is "0":\n        return response.json(dict(tip_dict=profTips))\n    else:\n        return response.json(dict(tip_dict=dateTips))\n\n\ndef selRandTip():\n    """\n    0 = profile tips\n    1 = dating tips\n    """\n    if request.args(0) is "0":\n        x = randint(0, len(profTips)-1)\n        return profTips[x]\n    else:\n        x = randint(0, len(dateTips)-1)\n        return dateTips[x]\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\ndef reset_db():\n    db.person.truncate()\n    db.chat.truncate()\n    db.email.truncate()\n    db.auth_user.truncate()\n    db.commit()\n    return "ok"\n\ndef drop_db():\n    db.person.drop()\n    db.chat.drop()\n    db.email.drop()\n    db.commit()\n    return "ok"\n\nresponse._vars=response._caller(settings)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\applications\\loveslug\\controllers/default.py", line 223, in <module>\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\applications\\loveslug\\controllers/default.py", line 95, in settings\n    profile = db(db.preferences.user_id == auth.user).select().first()\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\gluon\\packages\\dal\\pydal\\objects.py", line 2002, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 122, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1286, in select\n    return self._select_aux(sql,fields,attributes)\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1243, in _select_aux\n    self.execute(sql)\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1378, in execute\n    return self.log_execute(*a, **b)\n  File "C:\\Users\\Josh Shih\\Desktop\\cmps183\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1372, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\nOperationalError: no such table: preferences\n'
p11
s.